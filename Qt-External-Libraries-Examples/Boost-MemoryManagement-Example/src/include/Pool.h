#pragma once

/*!
 * \brief The Pool class
 * \details
 * Boost.Pool представляет собой очень быстрый алгоритм выделения памяти, быстродействие которого достигается за счет ограничения области
 * применения, т.е. потерей универсальности.
 *
 * Применение Pools дает вам больше контроля над использованием памяти в вашей программе. Например, у вас может быть ситуация, когда вы
 * выделяете несколько небольших объектов в одном месте и затем в определенный момент они вам становятся не нужны. Используя Pool, вы можете
 * либо вызвать деструкторы всех этих объектов, либо просто удалить их из памяти; при этом Pool гарантирует отсутствие утечек памяти.
 *
 * Pool используется при частом создании и удалении небольших объектов.
 */
class Pool
{
private:
    Pool() = default;
    ~Pool() = default;

public:
    /*!
     * \brief Пример использования boost::object_pool<T>
     * \details
     * В конструктор можно передать два параметра. Первый параметр устанавливает размер блока памяти, а второй параметр устанавливает
     * максимальный размер выделяемого блока памяти.
     *
     * Заголовочный файл - #include <boost/pool/object_pool.hpp>
     */
    static auto ObjectPoolExample() -> void;

    /*!
     * \brief Пример использования boost::singleton_pool
     * \details
     * Заголовочный файл - #include <boost/pool/singleton_pool.hpp>
     */
    static auto SingletonPoolExample() -> void;
};
