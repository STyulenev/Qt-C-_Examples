#pragma once

#include <QDebug>

/*!
 * \brief Пример использования феникс функций
 * \details
 * Boost.Phoenix — самая важная библиотека Boost для функционального программирования. В то время как такие библиотеки, как Boost.Bind или Boost.Lambda,
 * обеспечивают некоторую поддержку функционального программирования, Boost.Phoenix включает в себя функции этих библиотек и выходит за их рамки.
 *
 * В функциональном программировании функции являются объектами и могут обрабатываться как объекты. С Boost.Phoenix функция может в результате вернуть
 * другую функцию. Также возможно передать функцию в качестве параметра другой функции. Поскольку функции являются объектами, можно различать создание
 * экземпляров и выполнение. Доступ к функции не равен ее выполнению.
 *
 * Boost.Phoenix поддерживает функциональное программирование с функциональными объектами: Функции — это объекты, основанные на классах, которые перегружают
 * оператор operator(). Таким образом, объекты-функции ведут себя как другие объекты в C++. Например, их можно скопировать и сохранить в контейнере.
 * Однако они также ведут себя как функции, потому что их можно вызывать.
 */
class BoostPhoenix
{
private:
    BoostPhoenix() = default;
    ~BoostPhoenix() = default;

public:
    /*!
     * \brief Пример использования феникс функций по сравнению с другими
     * \details
     * Заголовочный файл - #include <boost/phoenix/phoenix.hpp>
     *
     * Помимо отсутствия заголовка функции со списком параметров, параметры функции Phoenix не имеют типов, по сравнению с лямбда
     *
     * - boost::phoenix::ref(value) - использовать переменную value из внешней области
     * - boost::phoenix::placeholders::arg1 - первый аргумент в феникс функции, arg2, arg3, ...
     */
    static auto exampleBoostPhoenix() -> void;

    /*!
     * \brief Пример использования ленивой записи феникс функций
     * \details
     * Заголовочный файл - #include <boost/phoenix/statement.hpp>
     *
     * Statement:
     * - if_ - оператор if
     * - if_else_ - оператор if else
     * - switch_ - оператор switch
     * - while_ - цикл while
     * - do_while_ - цикл do_while
     * - for_ - цикл for
     * - try_ catch_ - блок try_ catch_
     * - throw_ - оператор throw
     *
     * Scope:
     * - let - создать локальную переменную
     * - lambda - лямбда функция
     */
    static auto exampleBoostPhoenixLazyStatements() -> void;

};
